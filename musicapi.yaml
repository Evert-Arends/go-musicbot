swagger: "2.0"

info:
  version: 1.0.0
  title: go-musicbot api
  description: A simple API to control a go-musicbot via http.

schemes:
  - http
host: localhost
basePath: /v1

consumes:
  - application/json
  - application/vnd.api+json
  - application/x-www-form-urlencoded

produces:
  - application/json; charset=utf-8
  - application/vnd.api+json

paths:
  /djplus/{yid}:
    parameters:
      - $ref: "#/parameters/yid"
    post:
      summary: "Youtube ripping endpoint"
      description: "This endpoint allows you to add a youtube link to the download queue"
      security: []
      responses:
        204:
          description: "Youtube ID was succesfully added to the download queue"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /mpd/start:
    post:
      summary: "MPD play endpoint"
      description: "This endpoint allows you to start mpd if it's not running"
      security: []
      responses:
        200:
          description: "MPD started succesfully"
          schema:
            $ref: "#/definitions/NowPlayingRestData"
        204:
          description: "Started MPD succesfully"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /mpd/next:
    post:
      summary: "MPD next endpoint"
      description: "This endpoint switches to the next track"
      security: []
      responses:
        200:
          description: "Succesfully switched to next track"
          schema:
            $ref: "#/definitions/NowPlayingRestData"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /mpd/nowplaying:
    get:
      summary: "Get the currently playing track"
      description: "This endpoint returns the currently playing track"
      security: []
      responses:
        200:
          description: "Current song playing"
          schema:
            $ref: "#/definitions/NowPlayingRestData"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /mpd/play:
    post:
      summary: "Search for and play a track matching the query"
      description: "This endpoints allows you to query a song, and play it"
      security: []
      parameters:
        - name: query
          in: body
          description: "What to query for."
          schema:
            $ref: "#/definitions/Query"
      responses:
        200:
          description: "Succesfully switched to queried song"
          schema:
            $ref: "#/definitions/NowPlayingRestData"
        404:
          description: "No results found"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /rate/boo:
    post:
      summary: "Decrease rating of current song"
      description: "This endpoint allows you to decrease the rating of the currently playing song"
      security: []
      responses:
        204:
          description: "Succesfully decreased rating of current song"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /rate/tune:
    post:
      summary: "Increase the rating of current song"
      description: "This endpoint allows you to increase the rating of the currently playing song"
      security: []
      responses:
        204:
          description: "Succesfully increased the rating of current song"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /radio/url:
    get:
      summary: "Return the URL for the stream"
      description: "This endpoint allows you to query the url for the radio"
      security: []
      responses:
        200:
          description: "Returns the url for the radio"
          schema:
            $ref: "#/definitions/RadioURL"

definitions:
  ErrorPointer:
    type: object
    properties:
      pointer:
        type: string
        minLength: 1
        maxLength: 128
  Error:
    type: object
    properties:
      detail:
        type: string
        minLength: 1
        maxLength: 512
      status:
        type: string
        pattern: "^[2345][0-9]{2}$"
        minLength: 3
        maxLength: 3
      source:
        $ref: "#/definitions/ErrorPointer"
  RadioURL:
    type: object
    required:
      - url
    properties:
      url:
        type: string
        pattern: "[a-zA-Z0-9:-_/]{12,512}"
        minLength: 12
        maxLength: 512
  NowPlaying:
    type: object
    required:
      - track
      - duration
      - rating
    properties:
      track:
        type: string
        minLength: 3
        maxLength: 256
      duration:
        type: string
        pattern: "[0-9hms]{2,20}"
        minLength: 2
        maxLength: 20
      rating:
        type: integer
        minimum: 0
        maximum: 10
  NowPlayingRestData:
    type: object
    properties:
      nowplaying:
        $ref: "#/definitions/NowPlaying"
      errors:
        $ref: "#/definitions/Error"
  Query:
    type: object
    required:
      - q
    properties:
      q:
        type: string
        minLength: 3
        maxLength: 256

responses:
  Standard500ErrorResponse:
    description: "An unexpected error occurred"
    schema:
      $ref: "#/definitions/Error"
  UnableToDownloadYIDResponse:
    description: "Unable to download Youtube ID"

parameters:
  yid:
    name: yid
    in: path
    required: true
    description: "Youtube ID, needs to point to a single video"
    type: string
    pattern: "[a-zA-Z0-9_-]{11}"
    minLength: 11
    maxLength: 11

securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: X-User-Token

security:
  - UserSecurity: []
